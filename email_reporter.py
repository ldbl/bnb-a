#!/usr/bin/env python3
"""
Email Reporter Module
Generates and sends daily BNB analysis reports via email
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os
from typing import Dict, Optional

from main import BNBAdvancedAnalyzer


class EmailReporter:
    """Handles daily email report generation and sending"""
    
    def __init__(self):
        # Email configuration from environment variables
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        self.recipient_email = os.getenv('RECIPIENT_EMAIL')
        
        # Validate required environment variables
        if not all([self.sender_email, self.sender_password, self.recipient_email]):
            raise ValueError("Missing required email configuration. Set SENDER_EMAIL, SENDER_PASSWORD, RECIPIENT_EMAIL")
    
    def generate_daily_report(self) -> str:
        """Generate comprehensive daily analysis report"""
        
        try:
            # Initialize analyzer
            analyzer = BNBAdvancedAnalyzer()
            
            # Get current analysis
            analysis = analyzer.analyze_market()
            alerts = analyzer.check_critical_alerts()
            
            if "error" in analysis:
                return f"❌ Error generating analysis: {analysis['error']}"
            
            # Build email report
            report_parts = []
            
            # Header
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M UTC')
            current_price = analysis.get('market_data', {}).get('current_price', 0)
            
            report_parts.append(f"""
🚀 BNB ADVANCED DAILY REPORT
Date: {current_time}
Current Price: ${current_price:.2f}
{'='*50}
""")
            
            # Critical Alerts Summary
            if alerts.get("show_any", False):
                report_parts.append(self.format_alerts_summary(alerts))
            else:
                report_parts.append("📊 No critical alerts today - market in normal conditions\n")
            
            # Strategic Analysis Summary
            signals = analysis.get('signals', {})
            report_parts.append(self.format_strategic_summary(signals))
            
            # ML Strategic Outlook
            try:
                ml_analysis = analyzer.ml_predictor.analyze_long_term_trends()
                if "error" not in ml_analysis:
                    report_parts.append(self.format_ml_outlook(ml_analysis))
            except:
                pass
            
            # Trend Reversal Check
            try:
                reversal_check = analyzer.reversal_detector.check_critical_reversal_alerts()
                if reversal_check.get("show_alert", False):
                    report_parts.append(self.format_reversal_alert(reversal_check))
            except:
                pass
            
            # Footer
            report_parts.append(f"""
{'='*50}
📧 Automated Daily Report from BNB Advanced Analyzer
🤖 Generated by AI-powered trading analysis system
⚠️  This is for informational purposes only, not financial advice
""")
            
            return "\n".join(report_parts)
            
        except Exception as e:
            return f"❌ Error generating daily report: {e}"
    
    def format_alerts_summary(self, alerts: Dict) -> str:
        """Format critical alerts for email"""
        
        alert_lines = ["🚨 CRITICAL ALERTS DETECTED:"]
        
        # Count alerts by type
        alert_types = {
            'whale_alerts': '🐋 Whale Activity',
            'correlation_alerts': '📊 Correlation Anomalies', 
            'fibonacci_alerts': '📐 Fibonacci Signals',
            'indicator_alerts': '📈 Technical Indicators',
            'ml_alerts': '🤖 ML Predictions',
            'reversal_alerts': '🔄 Trend Reversals'
        }
        
        total_alerts = 0
        for alert_type, alert_name in alert_types.items():
            count = len(alerts.get(alert_type, []))
            if count > 0:
                alert_lines.append(f"   {alert_name}: {count} alert(s)")
                total_alerts += count
        
        alert_lines.append(f"   📍 TOTAL: {total_alerts} critical alert(s)")
        alert_lines.append("   💡 Check detailed analysis for context\n")
        
        return "\n".join(alert_lines)
    
    def format_strategic_summary(self, signals: Dict) -> str:
        """Format strategic trading signals for email"""
        
        action = signals.get('action', 'WAIT')
        confidence = signals.get('confidence', 0)
        bull_score = signals.get('bull_score', 0)
        bear_score = signals.get('bear_score', 0)
        
        # Action emoji
        action_emoji = {
            'STRONG_BUY': '🟢🚀',
            'BUY': '🟢', 
            'WAIT': '🟡',
            'SELL': '🔴',
            'STRONG_SELL': '🔴💥'
        }.get(action, '❓')
        
        summary_lines = [
            "📊 STRATEGIC TRADING SIGNALS:",
            f"   Action: {action_emoji} {action}",
            f"   Confidence: {confidence}%",
            f"   Bull Score: {bull_score} | Bear Score: {bear_score}",
        ]
        
        # Add reasoning if available
        reasoning = signals.get('reasoning', [])
        if reasoning:
            summary_lines.append("   💭 Key Factors:")
            for reason in reasoning[:3]:  # Top 3 reasons
                summary_lines.append(f"      • {reason}")
        
        summary_lines.append("")
        return "\n".join(summary_lines)
    
    def format_ml_outlook(self, ml_analysis: Dict) -> str:
        """Format ML strategic outlook for email"""
        
        cycle = ml_analysis.get('cycle_position', {})
        targets = ml_analysis.get('long_term_targets', {})
        trend = ml_analysis.get('trend_analysis', {})
        
        outlook_lines = [
            "🤖 AI STRATEGIC OUTLOOK:",
            f"   Market Cycle: {cycle.get('phase', 'Unknown')}",
            f"   Risk Level: {cycle.get('risk_level', 'Unknown')}",
            f"   Trend Direction: {trend.get('trend_direction', 'Unknown')}",
            f"   Monthly Performance: {trend.get('monthly_performance', 0):+.1f}%",
            ""
        ]
        
        # Price targets
        if targets:
            outlook_lines.append("🎯 PRICE TARGETS:")
            for period, target in targets.items():
                price = target.get('price', 0)
                change = target.get('change_pct', 0)
                emoji = '🚀' if change > 0 else '💥'
                period_name = period.replace('_', ' ').title()
                outlook_lines.append(f"   {period_name}: {emoji} ${price:.2f} ({change:+.1f}%)")
        
        outlook_lines.append("")
        return "\n".join(outlook_lines)
    
    def format_reversal_alert(self, reversal_data: Dict) -> str:
        """Format trend reversal alert for email"""
        
        reversal_info = reversal_data.get('reversal_data', {})
        direction = reversal_info.get('direction', 'UNKNOWN')
        conviction = reversal_info.get('conviction', 'LOW')
        score = reversal_info.get('total_score', 0)
        
        reversal_lines = [
            "🔄 TREND REVERSAL ALERT:",
            f"   Direction: {direction}",
            f"   Conviction: {conviction}",
            f"   Reversal Score: {score}/25",
            "   📈 Consider position adjustment based on signals",
            ""
        ]
        
        return "\n".join(reversal_lines)
    
    def send_email(self, subject: str, body: str) -> bool:
        """Send email with the daily report"""
        
        try:
            # Create message
            message = MIMEMultipart()
            message["From"] = self.sender_email
            message["To"] = self.recipient_email
            message["Subject"] = subject
            
            # Add body to email
            message.attach(MIMEText(body, "plain"))
            
            # Create secure connection and send email
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                
                text = message.as_string()
                server.sendmail(self.sender_email, self.recipient_email, text)
            
            print(f"✅ Email sent successfully to {self.recipient_email}")
            return True
            
        except Exception as e:
            print(f"❌ Failed to send email: {e}")
            return False
    
    def send_daily_report(self) -> bool:
        """Generate and send the daily BNB analysis report"""
        
        print("📧 Generating daily BNB analysis report...")
        
        # Generate report content
        report_content = self.generate_daily_report()
        
        # Create subject with current date and price
        current_date = datetime.now().strftime('%Y-%m-%d')
        
        try:
            analyzer = BNBAdvancedAnalyzer()
            market_data = analyzer.get_market_data()
            current_price = market_data.get('current_price', 0)
            subject = f"🚀 BNB Daily Report - {current_date} | ${current_price:.2f}"
        except:
            subject = f"🚀 BNB Daily Report - {current_date}"
        
        # Send email
        success = self.send_email(subject, report_content)
        
        if success:
            print("📧 Daily report sent successfully!")
        else:
            print("❌ Failed to send daily report")
        
        return success


def main():
    """Main function for running daily email report"""
    
    try:
        # Check if running in test mode
        test_mode = os.getenv('TEST_MODE', 'false').lower() == 'true'
        
        if test_mode:
            print("🧪 Running in TEST MODE - checking email configuration...")
            
            # Check environment variables
            required_vars = ['SENDER_EMAIL', 'SENDER_PASSWORD', 'RECIPIENT_EMAIL']
            missing_vars = [var for var in required_vars if not os.getenv(var)]
            
            if missing_vars:
                print(f"❌ Missing environment variables: {missing_vars}")
                return False
            
            print("✅ Email configuration looks good!")
            
            # Generate and print report (don't send)
            reporter = EmailReporter()
            report = reporter.generate_daily_report()
            print("\n📧 GENERATED REPORT:")
            print("-" * 50)
            print(report)
            print("-" * 50)
            return True
        
        else:
            # Normal mode - send actual email
            reporter = EmailReporter()
            return reporter.send_daily_report()
            
    except Exception as e:
        print(f"❌ Error in email reporter: {e}")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
